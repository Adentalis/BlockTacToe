package contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class BlockTacToe extends Contract {
    private static final String BINARY = "6080604052610258600155666a94d74f43000060095534801561002157600080fd5b50614076806100316000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303a23c7d1461017f578063061e494f146101c0578063092e47ff146102015780630b8145d61461025c578063117a5b90146102c957806325b05c881461039a57806327e235e3146103f15780632ed96cdf1461044857806339580054146104735780633ccfd60b146104ca57806345e09e54146104e157806350cf4061146105635780636e5ad0ea146105d05780637ecea138146105e7578063830e6a831461065e5780638ff5578e146106ab57806390502bc4146107025780639378833814610785578063ab420f9b1461079c578063b55991c0146107b3578063bcc412da146107f4578063cfe2d98914610876578063d01bd0391461088d578063d0e30db0146108ba578063d82af47c146108c4578063f74ac2a6146108f1578063fad133a51461091e578063fdb479fe14610935578063ffde0c74146109b8575b61017d610a07565b005b34801561018b57600080fd5b506101aa60048036038101908080359060200190929190505050610a65565b6040518082815260200191505060405180910390f35b3480156101cc57600080fd5b506101eb60048036038101908080359060200190929190505050610a91565b6040518082815260200191505060405180910390f35b34801561020d57600080fd5b50610242600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610abd565b604051808215151515815260200191505060405180910390f35b34801561026857600080fd5b5061028760048036038101908080359060200190929190505050610add565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d557600080fd5b506102f460048036038101908080359060200190929190505050610b29565b604051808881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183600581111561037a57fe5b60ff16815260200182815260200197505050505050505060405180910390f35b3480156103a657600080fd5b506103db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc7565b6040518082815260200191505060405180910390f35b3480156103fd57600080fd5b50610432600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bdf565b6040518082815260200191505060405180910390f35b34801561045457600080fd5b5061045d610bf7565b6040518082815260200191505060405180910390f35b34801561047f57600080fd5b50610488610bfd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104d657600080fd5b506104df610d12565b005b3480156104ed57600080fd5b5061050c60048036038101908080359060200190929190505050610e2d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561054f578082015181840152602081019050610534565b505050509050019250505060405180910390f35b34801561056f57600080fd5b5061058e60048036038101908080359060200190929190505050610ea8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105dc57600080fd5b506105e5610ee6565b005b3480156105f357600080fd5b50610648600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611151565b6040518082815260200191505060405180910390f35b34801561066a57600080fd5b506106a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611176565b005b3480156106b757600080fd5b506106ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611417565b6040518082815260200191505060405180910390f35b34801561070e57600080fd5b50610743600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611460565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561079157600080fd5b5061079a611493565b005b3480156107a857600080fd5b506107b1611688565b005b3480156107bf57600080fd5b506107de60048036038101908080359060200190929190505050611cab565b6040518082815260200191505060405180910390f35b34801561080057600080fd5b5061081f60048036038101908080359060200190929190505050611cd7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610862578082015181840152602081019050610847565b505050509050019250505060405180910390f35b34801561088257600080fd5b5061088b611d52565b005b34801561089957600080fd5b506108b860048036038101908080359060200190929190505050611fbd565b005b6108c2610a07565b005b3480156108d057600080fd5b506108ef60048036038101908080359060200190929190505050612820565b005b3480156108fd57600080fd5b5061091c60048036038101908080359060200190929190505050612cf9565b005b34801561092a57600080fd5b50610933612f27565b005b34801561094157600080fd5b50610976600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131cc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109c457600080fd5b506109e3600480360381019080803590602001909291905050506131ff565b604051808260058111156109f357fe5b60ff16815260200191505060405180910390f35b600034111515610a1657600080fd5b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550565b60008060018303815481101515610a7857fe5b9060005260206000209060090201600801549050919050565b60008060018303815481101515610aa457fe5b9060005260206000209060090201600101549050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b60008060018303815481101515610af057fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600081815481101515610b3857fe5b90600052602060002090600902016000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060070160009054906101000a900460ff16908060080154905087565b60026020528060005260406000206000915090505481565b60036020528060005260406000206000915090505481565b60015481565b6000806001610c0b33611417565b0390503373ffffffffffffffffffffffffffffffffffffffff16600082815481101515610c3457fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610cca57600081815481101515610c9157fe5b906000526020600020906009020160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150610d0e565b600081815481101515610cd957fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b5090565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610d6057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610de5573d6000803e3d6000fd5b506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6060600060018303815481101515610e4157fe5b9060005260206000209060090201600601805480602002602001604051908101604052809291908181526020018280548015610e9c57602002820191906000526020600020905b815481526020019060010190808311610e88575b50505050509050919050565b600881815481101515610eb757fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610f6c57600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6004602052816000526040600020602052806000526040600020600091509150505481565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111c457600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561121257600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561129657600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156114ed57600080fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b600880549050811015611685573373ffffffffffffffffffffffffffffffffffffffff1660088281548110151561157d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116785760086001600880549050038154811015156115db57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660088281548110151561161557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060088054809190600190036116729190613fac565b50611685565b808060010191505061154a565b50565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561170e57600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561183a57600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561188857600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561190c57600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ca833826002600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402613238565b50565b60008060018303815481101515611cbe57fe5b9060005260206000209060090201600401549050919050565b6060600060018303815481101515611ceb57fe5b9060005260206000209060090201600501805480602002602001604051908101604052809291908181526020018280548015611d4657602002820191906000526020600020905b815481526020019060010190808311611d32575b50505050509050919050565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611dd857600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415151561200d57600080fd5b60006001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540381548110151561205e57fe5b906000526020600020906009020190506001151561223a82610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561219c57602002820191906000526020600020905b815481526020019060010190808311612188575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156121f457602002820191906000526020600020905b8154815260200190600101908083116121e0575b505050505081526020016007820160009054906101000a900460ff16600581111561221b57fe5b600581111561222657fe5b815260200160088201548152505084613873565b151514151561224857600080fd5b60016002826004015481151561225a57fe5b061480156122b757508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061232d57506000600282600401548115156122cf57fe5b0614801561232c57508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b5b151561233857600080fd5b806005018290806001815401808255809150509060018203906000526020600020016000909192909190915055504281600801819055503373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156123f057600181600601600184038154811015156123dd57fe5b9060005260206000200181905550612415565b6002816006016001840381548110151561240657fe5b90600052602060002001819055505b6005816004015410151561260f576125ea81610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561254d57602002820191906000526020600020905b815481526020019060010190808311612539575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156125a557602002820191906000526020600020905b815481526020019060010190808311612591575b505050505081526020016007820160009054906101000a900460ff1660058111156125cc57fe5b60058111156125d757fe5b81526020016008820154815250506138af565b8160070160006101000a81548160ff0219169083600581111561260957fe5b02179055505b6000600581111561261c57fe5b8160070160009054906101000a900460ff16600581111561263957fe5b1415156128085761280781610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561276a57602002820191906000526020600020905b815481526020019060010190808311612756575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156127c257602002820191906000526020600020905b8154815260200190600101908083116127ae575b505050505081526020016007820160009054906101000a900460ff1660058111156127e957fe5b60058111156127f457fe5b8152602001600882015481525050613cd7565b5b80600401600081548092919060010191905055505050565b6000806000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415151561287257600080fd5b6001600260006001860381548110151561288857fe5b9060005260206000209060090201600401548115156128a357fe5b0614156128f5576000600184038154811015156128bc57fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915061293c565b60006001840381548110151561290757fe5b906000526020600020906009020160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561297757600080fd5b6000905060015460006001850381548110151561299057fe5b906000526020600020906009020160080154420311156129af57600190505b8015612abd576000600184038154811015156129c757fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612a76576004600060018503815481101515612a4057fe5b906000526020600020906009020160070160006101000a81548160ff02191690836005811115612a6c57fe5b0217905550612abc565b6005600060018503815481101515612a8a57fe5b906000526020600020906009020160070160006101000a81548160ff02191690836005811115612ab657fe5b02179055505b5b60006005811115612aca57fe5b600060018503815481101515612adc57fe5b906000526020600020906009020160070160009054906101000a900460ff166005811115612b0657fe5b141515612cf457612cf3600060018503815481101515612b2257fe5b9060005260206000209060090201610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020018280548015612c5657602002820191906000526020600020905b815481526020019060010190808311612c42575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015612cae57602002820191906000526020600020905b815481526020019060010190808311612c9a575b505050505081526020016007820160009054906101000a900460ff166005811115612cd557fe5b6005811115612ce057fe5b8152602001600882015481525050613cd7565b5b505050565b6001600060018303815481101515612d0d57fe5b906000526020600020906009020160070160006101000a81548160ff02191690836005811115612d3957fe5b0217905550612f24600060018303815481101515612d5357fe5b9060005260206000209060090201610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020018280548015612e8757602002820191906000526020600020905b815481526020019060010190808311612e73575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015612edf57602002820191906000526020600020905b815481526020019060010190808311612ecb575b505050505081526020016007820160009054906101000a900460ff166005811115612f0657fe5b6005811115612f1157fe5b8152602001600882015481525050613cd7565b50565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515612f8257600080fd5b6000600880549050111561310a576008600160088054905003815481101515612fa757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506008805480919060019003612fe99190613fac565b506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260095481151561305057fe5b04600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060026009548115156130ab57fe5b04600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506131053382600954613238565b6131c9565b60083390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806001830381548110151561321257fe5b906000526020600020906009020160070160009054906101000a900460ff169050919050565b6000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156132c957506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156132d457600080fd5b60016000805490500191506132e882613f4e565b9050600115158115151415613520576000610120604051908101604052808481526020018581526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016001815260200160006040519080825280602002602001820160405280156133815781602001602082028038833980820191505090505b50815260200160096040519080825280602002602001820160405280156133b75781602001602082028038833980820191505090505b508152602001600060058111156133ca57fe5b81526020014281525090806001815401808255809150509060018203906000526020600020906009020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050190805190602001906134c6929190613fd8565b5060c08201518160060190805190602001906134e3929190613fd8565b5060e08201518160070160006101000a81548160ff0219169083600581111561350857fe5b02179055506101008201518160080155505050613745565b6000610120604051908101604052808481526020018581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020016001815260200160006040519080825280602002602001820160405280156135aa5781602001602082028038833980820191505090505b50815260200160096040519080825280602002602001820160405280156135e05781602001602082028038833980820191505090505b508152602001600060058111156135f357fe5b81526020014281525090806001815401808255809150509060018203906000526020600020906009020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050190805190602001906136ef929190613fd8565b5060c082015181600601908051906020019061370c929190613fd8565b5060e08201518160070160006101000a81548160ff0219169083600581111561373157fe5b021790555061010082015181600801555050505b81600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fc4490dfb76823bf820ad165c61a9db7902f1074fbe5954bbffac953275678dd7858584604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050505050565b6000808360c001516001840381518110151561388b57fe5b9060200190602002015114156138a457600190506138a9565b600090505b92915050565b60008060008090506001600285608001518115156138c957fe5b0614156138d957600191506138de565b600291505b818460c0015160008151811015156138f257fe5b906020019060200201511480156139245750818460c00151600481518110151561391857fe5b90602001906020020151145b801561394b5750818460c00151600881518110151561393f57fe5b90602001906020020151145b806139bf5750818460c00151600281518110151561396557fe5b906020019060200201511480156139975750818460c00151600481518110151561398b57fe5b90602001906020020151145b80156139be5750818460c0015160068151811015156139b257fe5b90602001906020020151145b5b80613a335750818460c0015160008151811015156139d957fe5b90602001906020020151148015613a0b5750818460c0015160018151811015156139ff57fe5b90602001906020020151145b8015613a325750818460c001516002815181101515613a2657fe5b90602001906020020151145b5b80613aa75750818460c001516003815181101515613a4d57fe5b90602001906020020151148015613a7f5750818460c001516004815181101515613a7357fe5b90602001906020020151145b8015613aa65750818460c001516005815181101515613a9a57fe5b90602001906020020151145b5b80613b1b5750818460c001516006815181101515613ac157fe5b90602001906020020151148015613af35750818460c001516007815181101515613ae757fe5b90602001906020020151145b8015613b1a5750818460c001516008815181101515613b0e57fe5b90602001906020020151145b5b80613b8f5750818460c001516000815181101515613b3557fe5b90602001906020020151148015613b675750818460c001516003815181101515613b5b57fe5b90602001906020020151145b8015613b8e5750818460c001516006815181101515613b8257fe5b90602001906020020151145b5b80613c035750818460c001516001815181101515613ba957fe5b90602001906020020151148015613bdb5750818460c001516004815181101515613bcf57fe5b90602001906020020151145b8015613c025750818460c001516007815181101515613bf657fe5b90602001906020020151145b5b80613c775750818460c001516002815181101515613c1d57fe5b90602001906020020151148015613c4f5750818460c001516005815181101515613c4357fe5b90602001906020020151145b8015613c765750818460c001516008815181101515613c6a57fe5b90602001906020020151145b5b15613c8157600190505b600115158115151415613ca9576001821415613ca05760029250613cd0565b60039250613cd0565b60098460800151148015613cc1575060001515811515145b15613ccf5760019250613cd0565b5b5050919050565b600060026000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060026000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016005811115613d7657fe5b8160e001516005811115613d8657fe5b1415613e535760028160200151811515613d9c57fe5b0460036000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060028160200151811515613dfd57fe5b0460036000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550613f4b565b60026005811115613e6057fe5b8160e001516005811115613e7057fe5b1480613e955750600580811115613e8357fe5b8160e001516005811115613e9357fe5b145b15613ef457806020015160036000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550613f4a565b806020015160036000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b5b50565b600080600242448560405180848152602001838152602001828152602001935050505060405180910390206001900460ff16811515613f8957fe5b06905060008160ff161415613fa15760019150613fa6565b600091505b50919050565b815481835581811115613fd357818360005260206000209182019101613fd29190614025565b5b505050565b828054828255906000526020600020908101928215614014579160200282015b82811115614013578251825591602001919060010190613ff8565b5b5090506140219190614025565b5090565b61404791905b8082111561404357600081600090555060010161402b565b5090565b905600a165627a7a7230582072b676e7c619ddacf119fcfbce2acbfee43b1bbbab269a55431f5b97ce54250d0029";

    public static final String FUNC_GETTIMESINCELASTTURN = "getTimeSinceLastTurn";

    public static final String FUNC_GETBET = "getBet";

    public static final String FUNC_HASACTIVEREQUEST = "hasActiveRequest";

    public static final String FUNC_GETSTARTINGPLAYER = "getStartingPlayer";

    public static final String FUNC_GAMES = "games";

    public static final String FUNC_PLAYERGAMEID = "playerGameId";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_TIMEFORONEMOVE = "timeForOneMove";

    public static final String FUNC_GETOPPONENT = "getOpponent";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_GETBOARD = "getBoard";

    public static final String FUNC_ACTIVEREQUESTS = "activeRequests";

    public static final String FUNC_REVOKEGAMEREQUEST = "revokeGameRequest";

    public static final String FUNC_GAMEREQUEST = "gameRequest";

    public static final String FUNC_INITGAME = "initGame";

    public static final String FUNC_GETGAMEID = "getGameid";

    public static final String FUNC_WANTSTOPLAYWITH = "wantsToPlayWith";

    public static final String FUNC_RETRACTREQUEST = "retractRequest";

    public static final String FUNC_ACCEPTGAMEREQUEST = "acceptGameRequest";

    public static final String FUNC_GETTURN = "getTurn";

    public static final String FUNC_GETGAMEHISTORY = "getGameHistory";

    public static final String FUNC_DENYGAMEREQUEST = "denyGameRequest";

    public static final String FUNC_DOTURN = "doTurn";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_CHECKTIMEFORONETURNOVER = "checkTimeForOneTurnOver";

    public static final String FUNC_KILLGAME = "killGame";

    public static final String FUNC_RANDOMOPPONENT = "randomOpponent";

    public static final String FUNC_HASTOACCEPTTHEGAME = "hasToAcceptTheGame";

    public static final String FUNC_GETGAMESTATE = "getGameState";

    public static final Event NEWGAME_EVENT = new Event("NewGame", 
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected BlockTacToe(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BlockTacToe(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<BigInteger> getTimeSinceLastTurn(BigInteger _id) {
        final Function function = new Function(FUNC_GETTIMESINCELASTTURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getBet(BigInteger _id) {
        final Function function = new Function(FUNC_GETBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> hasActiveRequest(String param0) {
        final Function function = new Function(FUNC_HASACTIVEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getStartingPlayer(BigInteger _id) {
        final Function function = new Function(FUNC_GETSTARTINGPLAYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger>> games(BigInteger param0) {
        final Function function = new Function(FUNC_GAMES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> playerGameId(String param0) {
        final Function function = new Function(FUNC_PLAYERGAMEID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balances(String param0) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> timeForOneMove() {
        final Function function = new Function(FUNC_TIMEFORONEMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getOpponent() {
        final Function function = new Function(FUNC_GETOPPONENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> withdraw() {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getBoard(BigInteger _id) {
        final Function function = new Function(FUNC_GETBOARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> activeRequests(BigInteger param0) {
        final Function function = new Function(FUNC_ACTIVEREQUESTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> revokeGameRequest() {
        final Function function = new Function(
                FUNC_REVOKEGAMEREQUEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> gameRequest(String param0, String param1) {
        final Function function = new Function(FUNC_GAMEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> initGame(String _opponent, BigInteger _gameValue) {
        final Function function = new Function(
                FUNC_INITGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_opponent), 
                new org.web3j.abi.datatypes.generated.Uint256(_gameValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getGameid(String _player) {
        final Function function = new Function(FUNC_GETGAMEID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_player)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> wantsToPlayWith(String param0) {
        final Function function = new Function(FUNC_WANTSTOPLAYWITH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> retractRequest() {
        final Function function = new Function(
                FUNC_RETRACTREQUEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> acceptGameRequest() {
        final Function function = new Function(
                FUNC_ACCEPTGAMEREQUEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getTurn(BigInteger _id) {
        final Function function = new Function(FUNC_GETTURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getGameHistory(BigInteger _id) {
        final Function function = new Function(FUNC_GETGAMEHISTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> denyGameRequest() {
        final Function function = new Function(
                FUNC_DENYGAMEREQUEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> doTurn(BigInteger _pos) {
        final Function function = new Function(
                FUNC_DOTURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pos)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> checkTimeForOneTurnOver(BigInteger _id) {
        final Function function = new Function(
                FUNC_CHECKTIMEFORONETURNOVER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> killGame(BigInteger _id) {
        final Function function = new Function(
                FUNC_KILLGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> randomOpponent() {
        final Function function = new Function(
                FUNC_RANDOMOPPONENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> hasToAcceptTheGame(String param0) {
        final Function function = new Function(FUNC_HASTOACCEPTTHEGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getGameState(BigInteger _id) {
        final Function function = new Function(FUNC_GETGAMESTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<NewGameEventResponse> getNewGameEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWGAME_EVENT, transactionReceipt);
        ArrayList<NewGameEventResponse> responses = new ArrayList<NewGameEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewGameEventResponse typedResponse = new NewGameEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.player1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.player2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewGameEventResponse> newGameEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewGameEventResponse>() {
            @Override
            public NewGameEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWGAME_EVENT, log);
                NewGameEventResponse typedResponse = new NewGameEventResponse();
                typedResponse.log = log;
                typedResponse.player1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.player2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewGameEventResponse> newGameEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWGAME_EVENT));
        return newGameEventObservable(filter);
    }

    public static RemoteCall<BlockTacToe> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BlockTacToe.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<BlockTacToe> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BlockTacToe.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static BlockTacToe load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new BlockTacToe(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static BlockTacToe load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BlockTacToe(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class NewGameEventResponse {
        public Log log;

        public String player1;

        public String player2;

        public BigInteger gameId;
    }
}

package contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class TestContract extends Contract {
    private static final String BINARY = "6080604052607860015566354a6ba7a1800060095534801561002057600080fd5b50613b81806100306000396000f30060806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303a23c7d14610174578063061e494f146101b5578063092e47ff146101f65780630b8145d614610251578063117a5b90146102be57806325b05c881461038f57806327e235e3146103e65780632ed96cdf1461043d57806339580054146104685780633ccfd60b146104bf57806345e09e54146104d657806350cf4061146105585780636e5ad0ea146105c55780637ecea138146105dc578063830e6a83146106535780638ff5578e146106a057806390502bc4146106f7578063937883381461077a578063ab420f9b14610791578063b55991c0146107a8578063bcc412da146107e9578063d01bd0391461086b578063d0e30db014610898578063d82af47c146108a2578063f74ac2a6146108cf578063fad133a5146108fc578063fdb479fe14610913578063ffde0c7414610996575b6101726109e5565b005b34801561018057600080fd5b5061019f60048036038101908080359060200190929190505050610a43565b6040518082815260200191505060405180910390f35b3480156101c157600080fd5b506101e060048036038101908080359060200190929190505050610a6f565b6040518082815260200191505060405180910390f35b34801561020257600080fd5b50610237600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a9b565b604051808215151515815260200191505060405180910390f35b34801561025d57600080fd5b5061027c60048036038101908080359060200190929190505050610abb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ca57600080fd5b506102e960048036038101908080359060200190929190505050610b07565b604051808881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183600581111561036f57fe5b60ff16815260200182815260200197505050505050505060405180910390f35b34801561039b57600080fd5b506103d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ba5565b6040518082815260200191505060405180910390f35b3480156103f257600080fd5b50610427600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbd565b6040518082815260200191505060405180910390f35b34801561044957600080fd5b50610452610bd5565b6040518082815260200191505060405180910390f35b34801561047457600080fd5b5061047d610bdb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104cb57600080fd5b506104d4610d24565b005b3480156104e257600080fd5b5061050160048036038101908080359060200190929190505050610e3f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610544578082015181840152602081019050610529565b505050509050019250505060405180910390f35b34801561056457600080fd5b5061058360048036038101908080359060200190929190505050610eba565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d157600080fd5b506105da610ef8565b005b3480156105e857600080fd5b5061063d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611065565b6040518082815260200191505060405180910390f35b34801561065f57600080fd5b5061069e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061108a565b005b3480156106ac57600080fd5b506106e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061132b565b6040518082815260200191505060405180910390f35b34801561070357600080fd5b50610738600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611374565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561078657600080fd5b5061078f6113a7565b005b34801561079d57600080fd5b506107a661159c565b005b3480156107b457600080fd5b506107d360048036038101908080359060200190929190505050611a3f565b6040518082815260200191505060405180910390f35b3480156107f557600080fd5b5061081460048036038101908080359060200190929190505050611a6b565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561085757808201518184015260208101905061083c565b505050509050019250505060405180910390f35b34801561087757600080fd5b5061089660048036038101908080359060200190929190505050611ae6565b005b6108a06109e5565b005b3480156108ae57600080fd5b506108cd60048036038101908080359060200190929190505050612349565b005b3480156108db57600080fd5b506108fa60048036038101908080359060200190929190505050612810565b005b34801561090857600080fd5b50610911612a3e565b005b34801561091f57600080fd5b50610954600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c2d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109a257600080fd5b506109c160048036038101908080359060200190929190505050612c60565b604051808260058111156109d157fe5b60ff16815260200191505060405180910390f35b6000341115156109f457600080fd5b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550565b60008060018303815481101515610a5657fe5b9060005260206000209060090201600801549050919050565b60008060018303815481101515610a8257fe5b9060005260206000209060090201600101549050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b60008060018303815481101515610ace57fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600081815481101515610b1657fe5b90600052602060002090600902016000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060070160009054906101000a900460ff16908060080154905087565b60026020528060005260406000206000915090505481565b60036020528060005260406000206000915090505481565b60015481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490503373ffffffffffffffffffffffffffffffffffffffff16600082815481101515610c4657fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610cdc57600081815481101515610ca357fe5b906000526020600020906009020160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150610d20565b600081815481101515610ceb57fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b5090565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610d7257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610df7573d6000803e3d6000fd5b506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6060600060018303815481101515610e5357fe5b9060005260206000209060090201600601805480602002602001604051908101604052809291908181526020018280548015610eae57602002820191906000526020600020905b815481526020019060010190808311610e9a575b50505050509050919050565b600881815481101515610ec957fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610f7e57600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6004602052816000526040600020602052806000526040600020600091509150505481565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156110d857600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561112657600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156111aa57600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561140157600080fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b600880549050811015611599573373ffffffffffffffffffffffffffffffffffffffff1660088281548110151561149157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561158c5760086001600880549050038154811015156114ef57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660088281548110151561152957fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060088054809190600190036115869190613ab7565b50611599565b808060010191505061145e565b50565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561162257600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561174e57600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561179c57600080fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561182057600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611a3c33826002600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402612c99565b50565b60008060018303815481101515611a5257fe5b9060005260206000209060090201600401549050919050565b6060600060018303815481101515611a7f57fe5b9060005260206000209060090201600501805480602002602001604051908101604052809291908181526020018280548015611ada57602002820191906000526020600020905b815481526020019060010190808311611ac6575b50505050509050919050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515611b3657600080fd5b60006001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403815481101515611b8757fe5b9060005260206000209060090201905060011515611d6382610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020018280548015611cc557602002820191906000526020600020905b815481526020019060010190808311611cb1575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611d1d57602002820191906000526020600020905b815481526020019060010190808311611d09575b505050505081526020016007820160009054906101000a900460ff166005811115611d4457fe5b6005811115611d4f57fe5b8152602001600882015481525050846132d4565b1515141515611d7157600080fd5b600160028260040154811515611d8357fe5b06148015611de057508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80611e565750600060028260040154811515611df857fe5b06148015611e5557508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b5b1515611e6157600080fd5b806005018290806001815401808255809150509060018203906000526020600020016000909192909190915055504281600801819055503373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f195760018160060160018403815481101515611f0657fe5b9060005260206000200181905550611f3e565b60028160060160018403815481101515611f2f57fe5b90600052602060002001819055505b600581600401541015156121385761211381610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561207657602002820191906000526020600020905b815481526020019060010190808311612062575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156120ce57602002820191906000526020600020905b8154815260200190600101908083116120ba575b505050505081526020016007820160009054906101000a900460ff1660058111156120f557fe5b600581111561210057fe5b8152602001600882015481525050613310565b8160070160006101000a81548160ff0219169083600581111561213257fe5b02179055505b6000600581111561214557fe5b8160070160009054906101000a900460ff16600581111561216257fe5b1415156123315761233081610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561229357602002820191906000526020600020905b81548152602001906001019080831161227f575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156122eb57602002820191906000526020600020905b8154815260200190600101908083116122d7575b505050505081526020016007820160009054906101000a900460ff16600581111561231257fe5b600581111561231d57fe5b8152602001600882015481525050613738565b5b80600401600081548092919060010191905055505050565b6000806000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415151561239b57600080fd5b600160026000600186038154811015156123b157fe5b9060005260206000209060090201600401548115156123cc57fe5b06141561241e576000600184038154811015156123e557fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150612465565b60006001840381548110151561243057fe5b906000526020600020906009020160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156124a057600080fd5b600090506001546000600185038154811015156124b957fe5b9060005260206000209050505080156125d4576000600184038154811015156124de57fe5b906000526020600020906009020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561258d57600460006001850381548110151561255757fe5b906000526020600020906009020160070160006101000a81548160ff0219169083600581111561258357fe5b02179055506125d3565b60056000600185038154811015156125a157fe5b906000526020600020906009020160070160006101000a81548160ff021916908360058111156125cd57fe5b02179055505b5b600060058111156125e157fe5b6000600185038154811015156125f357fe5b906000526020600020906009020160070160009054906101000a900460ff16600581111561261d57fe5b14151561280b5761280a60006001850381548110151561263957fe5b9060005260206000209060090201610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561276d57602002820191906000526020600020905b815481526020019060010190808311612759575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156127c557602002820191906000526020600020905b8154815260200190600101908083116127b1575b505050505081526020016007820160009054906101000a900460ff1660058111156127ec57fe5b60058111156127f757fe5b8152602001600882015481525050613738565b5b505050565b600160006001830381548110151561282457fe5b906000526020600020906009020160070160006101000a81548160ff0219169083600581111561285057fe5b0217905550612a3b60006001830381548110151561286a57fe5b9060005260206000209060090201610120604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561299e57602002820191906000526020600020905b81548152602001906001019080831161298a575b50505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156129f657602002820191906000526020600020905b8154815260200190600101908083116129e2575b505050505081526020016007820160009054906101000a900460ff166005811115612a1d57fe5b6005811115612a2857fe5b8152602001600882015481525050613738565b50565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515612a9957600080fd5b60006008805490501115612b6b576008600160088054905003815481101515612abe57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506008805480919060019003612b009190613ab7565b506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612b663382600954612c99565b612c2a565b60083390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060018303815481101515612c7357fe5b906000526020600020906009020160070160009054906101000a900460ff169050919050565b6000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054148015612d2a57506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515612d3557600080fd5b6001600080549050019150612d4982613a59565b9050600115158115151415612f81576000610120604051908101604052808481526020018581526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001600181526020016000604051908082528060200260200182016040528015612de25781602001602082028038833980820191505090505b5081526020016009604051908082528060200260200182016040528015612e185781602001602082028038833980820191505090505b50815260200160006005811115612e2b57fe5b81526020014281525090806001815401808255809150509060018203906000526020600020906009020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005019080519060200190612f27929190613ae3565b5060c0820151816006019080519060200190612f44929190613ae3565b5060e08201518160070160006101000a81548160ff02191690836005811115612f6957fe5b021790555061010082015181600801555050506131a6565b6000610120604051908101604052808481526020018581526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200160018152602001600060405190808252806020026020018201604052801561300b5781602001602082028038833980820191505090505b50815260200160096040519080825280602002602001820160405280156130415781602001602082028038833980820191505090505b5081526020016000600581111561305457fe5b81526020014281525090806001815401808255809150509060018203906000526020600020906009020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005019080519060200190613150929190613ae3565b5060c082015181600601908051906020019061316d929190613ae3565b5060e08201518160070160006101000a81548160ff0219169083600581111561319257fe5b021790555061010082015181600801555050505b81600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fc4490dfb76823bf820ad165c61a9db7902f1074fbe5954bbffac953275678dd7858584604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050505050565b6000808360c00151600184038151811015156132ec57fe5b906020019060200201511415613305576001905061330a565b600090505b92915050565b600080600080905060016002856080015181151561332a57fe5b06141561333a576001915061333f565b600291505b818460c00151600081518110151561335357fe5b906020019060200201511480156133855750818460c00151600481518110151561337957fe5b90602001906020020151145b80156133ac5750818460c0015160088151811015156133a057fe5b90602001906020020151145b806134205750818460c0015160028151811015156133c657fe5b906020019060200201511480156133f85750818460c0015160048151811015156133ec57fe5b90602001906020020151145b801561341f5750818460c00151600681518110151561341357fe5b90602001906020020151145b5b806134945750818460c00151600081518110151561343a57fe5b9060200190602002015114801561346c5750818460c00151600181518110151561346057fe5b90602001906020020151145b80156134935750818460c00151600281518110151561348757fe5b90602001906020020151145b5b806135085750818460c0015160038151811015156134ae57fe5b906020019060200201511480156134e05750818460c0015160048151811015156134d457fe5b90602001906020020151145b80156135075750818460c0015160058151811015156134fb57fe5b90602001906020020151145b5b8061357c5750818460c00151600681518110151561352257fe5b906020019060200201511480156135545750818460c00151600781518110151561354857fe5b90602001906020020151145b801561357b5750818460c00151600881518110151561356f57fe5b90602001906020020151145b5b806135f05750818460c00151600081518110151561359657fe5b906020019060200201511480156135c85750818460c0015160038151811015156135bc57fe5b90602001906020020151145b80156135ef5750818460c0015160068151811015156135e357fe5b90602001906020020151145b5b806136645750818460c00151600181518110151561360a57fe5b9060200190602002015114801561363c5750818460c00151600481518110151561363057fe5b90602001906020020151145b80156136635750818460c00151600781518110151561365757fe5b90602001906020020151145b5b806136d85750818460c00151600281518110151561367e57fe5b906020019060200201511480156136b05750818460c0015160058151811015156136a457fe5b90602001906020020151145b80156136d75750818460c0015160088151811015156136cb57fe5b90602001906020020151145b5b156136e257600190505b60011515811515141561370a5760018214156137015760029250613731565b60039250613731565b60098460800151148015613722575060001515811515145b156137305760019250613731565b5b5050919050565b600060026000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060026000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160058111156137d757fe5b8160e0015160058111156137e757fe5b14156138b457600281602001518115156137fd57fe5b0460036000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506002816020015181151561385e57fe5b0460036000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550613a56565b600260058111156138c157fe5b8160e0015160058111156138d157fe5b14806138f657506005808111156138e457fe5b8160e0015160058111156138f457fe5b145b156139aa57806020015160036000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806020015160036000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550613a55565b806020015160036000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806020015160036000836040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b5b50565b600080600242448560405180848152602001838152602001828152602001935050505060405180910390206001900460ff16811515613a9457fe5b06905060008160ff161415613aac5760019150613ab1565b600091505b50919050565b815481835581811115613ade57818360005260206000209182019101613add9190613b30565b5b505050565b828054828255906000526020600020908101928215613b1f579160200282015b82811115613b1e578251825591602001919060010190613b03565b5b509050613b2c9190613b30565b5090565b613b5291905b80821115613b4e576000816000905550600101613b36565b5090565b905600a165627a7a723058209cde1f5031c263fe48e9c2243093a7f348fd5c7026d6a4a865f3077ec029abde0029";

    public static final String FUNC_GETTIMESINCELASTTURN = "getTimeSinceLastTurn";

    public static final String FUNC_GETBET = "getBet";

    public static final String FUNC_HASACTIVEREQUEST = "hasActiveRequest";

    public static final String FUNC_GETSTARTINGPLAYER = "getStartingPlayer";

    public static final String FUNC_GAMES = "games";

    public static final String FUNC_PLAYERGAMEID = "playerGameId";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_TIMEFORONEMOVE = "timeForOneMove";

    public static final String FUNC_GETOPPONENT = "getOpponent";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_GETBOARD = "getBoard";

    public static final String FUNC_ACTIVEREQUESTS = "activeRequests";

    public static final String FUNC_REVOKEGAMEREQUEST = "revokeGameRequest";

    public static final String FUNC_GAMEREQUEST = "gameRequest";

    public static final String FUNC_INITGAME = "initGame";

    public static final String FUNC_GETGAMEID = "getGameid";

    public static final String FUNC_WANTSTOPLAYWITH = "wantsToPlayWith";

    public static final String FUNC_RETRACTREQUEST = "retractRequest";

    public static final String FUNC_ACCEPTGAMEREQUEST = "acceptGameRequest";

    public static final String FUNC_GETTURN = "getTurn";

    public static final String FUNC_GETGAMEHISTORY = "getGameHistory";

    public static final String FUNC_DOTURN = "doTurn";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_CHECKTIMEFORONETURNOVER = "checkTimeForOneTurnOver";

    public static final String FUNC_KILLGAME = "killGame";

    public static final String FUNC_RANDOMOPPONENT = "randomOpponent";

    public static final String FUNC_HASTOACCEPTTHEGAME = "hasToAcceptTheGame";

    public static final String FUNC_GETGAMESTATE = "getGameState";

    public static final Event NEWGAME_EVENT = new Event("NewGame", 
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected TestContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TestContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<BigInteger> getTimeSinceLastTurn(BigInteger _id) {
        final Function function = new Function(FUNC_GETTIMESINCELASTTURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getBet(BigInteger _id) {
        final Function function = new Function(FUNC_GETBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> hasActiveRequest(String param0) {
        final Function function = new Function(FUNC_HASACTIVEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getStartingPlayer(BigInteger _id) {
        final Function function = new Function(FUNC_GETSTARTINGPLAYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger>> games(BigInteger param0) {
        final Function function = new Function(FUNC_GAMES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> playerGameId(String param0) {
        final Function function = new Function(FUNC_PLAYERGAMEID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balances(String param0) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> timeForOneMove() {
        final Function function = new Function(FUNC_TIMEFORONEMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getOpponent() {
        final Function function = new Function(FUNC_GETOPPONENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> withdraw() {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getBoard(BigInteger _id) {
        final Function function = new Function(FUNC_GETBOARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> activeRequests(BigInteger param0) {
        final Function function = new Function(FUNC_ACTIVEREQUESTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> revokeGameRequest() {
        final Function function = new Function(
                FUNC_REVOKEGAMEREQUEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> gameRequest(String param0, String param1) {
        final Function function = new Function(FUNC_GAMEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> initGame(String _opponent, BigInteger _gameValue) {
        final Function function = new Function(
                FUNC_INITGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_opponent), 
                new org.web3j.abi.datatypes.generated.Uint256(_gameValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getGameid(String _player) {
        final Function function = new Function(FUNC_GETGAMEID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_player)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> wantsToPlayWith(String param0) {
        final Function function = new Function(FUNC_WANTSTOPLAYWITH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> retractRequest() {
        final Function function = new Function(
                FUNC_RETRACTREQUEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> acceptGameRequest() {
        final Function function = new Function(
                FUNC_ACCEPTGAMEREQUEST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getTurn(BigInteger _id) {
        final Function function = new Function(FUNC_GETTURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getGameHistory(BigInteger _id) {
        final Function function = new Function(FUNC_GETGAMEHISTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> doTurn(BigInteger _pos) {
        final Function function = new Function(
                FUNC_DOTURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pos)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> checkTimeForOneTurnOver(BigInteger _id) {
        final Function function = new Function(
                FUNC_CHECKTIMEFORONETURNOVER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> killGame(BigInteger _id) {
        final Function function = new Function(
                FUNC_KILLGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> randomOpponent() {
        final Function function = new Function(
                FUNC_RANDOMOPPONENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> hasToAcceptTheGame(String param0) {
        final Function function = new Function(FUNC_HASTOACCEPTTHEGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getGameState(BigInteger _id) {
        final Function function = new Function(FUNC_GETGAMESTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<NewGameEventResponse> getNewGameEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWGAME_EVENT, transactionReceipt);
        ArrayList<NewGameEventResponse> responses = new ArrayList<NewGameEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewGameEventResponse typedResponse = new NewGameEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.player1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.player2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewGameEventResponse> newGameEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewGameEventResponse>() {
            @Override
            public NewGameEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWGAME_EVENT, log);
                NewGameEventResponse typedResponse = new NewGameEventResponse();
                typedResponse.log = log;
                typedResponse.player1 = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.player2 = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewGameEventResponse> newGameEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWGAME_EVENT));
        return newGameEventObservable(filter);
    }

    public static RemoteCall<TestContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TestContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<TestContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TestContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static TestContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TestContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static TestContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TestContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class NewGameEventResponse {
        public Log log;

        public String player1;

        public String player2;

        public BigInteger gameId;
    }
}
